// Với input và output như bài 1, viết chương trình cài đặt thuật toán Prim 

// For example:

// Input	
// 3 3
// 0 1 1
// 1 2 2
// 2 0 3
// Result
// 0 1 1
// 1 2 2
// 3
#include<bits/stdc++.h>

using namespace std;

#define MAX 1005

int n, m;

int graph[MAX][MAX], parent[MAX];

bool visited[MAX];

void prim() {

// Initialize minimum weight and visited arrays

int min_weight[n];

for(int i = 0; i < n; i++) {

min_weight[i] = INT_MAX;

visited[i] = false;

}

// Start with the first vertex

min_weight[0] = 0;

parent[0] = -1;

for(int i = 0; i < n-1; i++) {

// Find the vertex with the minimum weight edge

int min_vertex = -1;

for(int j = 0; j < n; j++) {

if(!visited[j] && (min_vertex == -1 || min_weight[j] < min_weight[min_vertex])) {

min_vertex = j;

}

}

// Mark the vertex as visited

visited[min_vertex] = true;

// Add the edge to the MST

for(int j = 0; j < n; j++) {

if(graph[min_vertex][j] != 0 && !visited[j] && graph[min_vertex][j] < min_weight[j]) {

min_weight[j] = graph[min_vertex][j];

parent[j] = min_vertex;

}

}

}

// Print the MST

int total_weight = 0;

for(int i = 1; i < n; i++) {

cout << parent[i] << " " << i << " " << graph[i][parent[i]] << endl;

total_weight += graph[i][parent[i]];

}

cout << total_weight << endl;

}

int main() {

cin >> n >> m;

// Initialize graph with 0 weights

memset(graph, 0, sizeof(graph));

// Add edges to graph

for(int i = 0; i < m; i++) {

int u, v, w;

cin >> u >> v >> w;

graph[u][v] = w;

graph[v][u] = w;

}

// Find the minimum spanning tree

prim();

return 0;

}